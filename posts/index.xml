<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Joeytat&#39;s Dev Log</title>
    <link>https://joeytat.github.io/posts/</link>
    <description>Recent content in Posts on Joeytat&#39;s Dev Log</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 04 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://joeytat.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2025 week 4: 程序员的不可替代性</title>
      <link>https://joeytat.github.io/posts/2025_week4/</link>
      <pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week4/</guid>
      <description>&lt;h2 id=&#34;工作&#34;&gt;工作&lt;/h2&gt;
&lt;p&gt;算是在 deadline 驱动下，度过了生产力爆棚的一周（请了一天假），每天实际写代码的时间达到了 7 小时。究其原因，只因为老板说有个新的提案要做时，加了一句“I personally think you are the best to work on it”，就卯足了劲儿赶在他需要的时间前，把手上的工作都快速处理好了。我真是容易满足啊 🫠&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;输出&lt;/h2&gt;
&lt;p&gt;周末花了点时间写了两篇博客&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DateFormatter 静态实例的一个小坑&lt;/li&gt;
&lt;li&gt;面向用户的版本号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在写&lt;a href=&#34;../user_friendly_version&#34;&gt;《面向用户的版本号》&lt;/a&gt;时，想起几年前曾有一个想法——编写一个系列，帮助非技术背景的 PM、BA、UX 或相关干系人理解移动开发领域的技术选型差异可能带来的业务影响，比如&lt;a href=&#34;../differences_between_scheme_and_universal_links&#34;&gt;《移动开发中实现 Deep Linking 的 URL Scheme 和 Universal Links 的区别是什么？》&lt;/a&gt;这篇文章。&lt;/p&gt;
&lt;p&gt;现在这种文章存在的意义似乎没有了，通过 AI 就能够图（mermaid）文并茂解释得更好，且有足够的耐心来解答读者的任何疑虑。可话又说回来，非技术背景的人在不知道有哪些技术方案可能会造成差异的情况下，是无法提出这样的问题的。&lt;/p&gt;
&lt;p&gt;这就是我认为程序员这个工种短时间内无法被取代的原因：你没办法让 AI 帮助完成&lt;strong&gt;你不知道你不知道&lt;/strong&gt;的任务。&lt;/p&gt;
&lt;p&gt;即使在有 AI 加持的现在，依然需要具备相当多的软件开发知识，才能够在众多方案中甄别出相对合理的方案，由此从生产到部署再到维护，完成一个复杂系统的构建。诚然，学习能力足够强的人可以通过边做边学的方式来让 AI 构建，但走完了整个流程的他，其实已经通过 AI 帮助，在“做中学”的过程中成为了一个 AI 时代的程序员。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AI 时代的程序员：明白各种软件开发领域名词背后的含义，但并不需要自己去实现的人。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这种“做中学”产生的副作用（掌握软件开发知识），也并不是每个需要发布软件的人都想要的，因为它相当费神耗时，所以我依然认为程序员这个工种在“将想法变成现实”的路上，具有较高程度的不可替代性。&lt;/p&gt;
&lt;p&gt;而 “工作的可被 AI 替代性” 这条线再具体一些，就是工作的产出物是否具有易于描述的创造流程，以及清晰的验收标准。输入和输出越复杂，描述和验收所需要的知识越多，工作就越不可被替代。&lt;/p&gt;
&lt;h2 id=&#34;娱乐&#34;&gt;娱乐&lt;/h2&gt;
&lt;p&gt;玩了两小时《双人成行》，开始觉得尽管画面好看，游戏体验也不错，有很多的小巧思。但不会产生沉迷的感觉，说放下就放下了，甚至会产生玩了两个场景就有点疲了的感觉。当然再拿起来也没有什么负担。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DateFormatter 静态实例的一个小坑</title>
      <link>https://joeytat.github.io/posts/date_formatter_issue/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/date_formatter_issue/</guid>
      <description>&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;目前开发的 app 主要服务于澳洲用户，开发团队由中澳两地开发人员组成，所以写和 DateFormatter 相关测试时，通常会指定 Calendar 所处时区。否则可能出现测试在本地运行完美通过，但澳洲同事本地或者 CI 上挂掉的情况出现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mockCalendar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Calendar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;identifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iso8601&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mockDate&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mockCalendar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DateComponents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2025&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;month&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 如果跑测试时候的时区是 Australia/Sydney，那么生成的日期是 02 Mar 09:00&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;humanizedDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mockDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;02 Mar 12:00”) // ❌
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要解决这个问题，通过指定 Calendar 及 DateFormatter 的时区为同一时区即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;var mockCalendar = Calendar(identifier: .iso8601)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;+ mockCalendar.timeZone = TimeZone(identifier: &amp;#34;Australia/Sydney&amp;#34;)!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;let formatter = DateFormatter()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;+ formatter.dateFormat.timeZone = mockCalendar.timeZone
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;let mockDate = mockCalendar.date(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  from: DateComponents(year: 2025, month: 3, day: 2, hour: 12)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#expect(humanizedDate(date: mockDate, formatter: formatter) == &amp;#34;02 Mar 12:00”) // ✅
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;优化&#34;&gt;优化&lt;/h2&gt;
&lt;p&gt;但在生产代码中考虑到 DateFormatter 在使用的时候如果不重用实例，则会额外耗费十几倍的时间。
&lt;img alt=&#34;how-expensive-is-dateformatter-when-using&#34; loading=&#34;lazy&#34; src=&#34;https://joeytat.github.io/date-formatter-time-consuming.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>面向用户的版本号</title>
      <link>https://joeytat.github.io/posts/user_friendly_version/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/user_friendly_version/</guid>
      <description>&lt;p&gt;日常开发接触能接触到的版本号方案通常就是语义化版本（构建号版本）：&lt;/p&gt;
&lt;p&gt;语义化版本大致是：主版本号.次版本号.修订号（1.2.3）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主版本号（Major）：有不向后兼容的 API 更改或重大功能更新时递增。&lt;/li&gt;
&lt;li&gt;次版本号（Minor）：有新功能但仍保持向后兼容时递增。&lt;/li&gt;
&lt;li&gt;修订号（Patch）：当软件进行向后兼容的问题修复时递增。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;构建号更简单，每次构建时自动递增。通常是团队内部用来定位问题使用，外部不可见。&lt;/p&gt;
&lt;p&gt;今天偶然发现了用了好几年的日记 app &lt;a href=&#34;https://dayoneapp.com&#34;&gt;Day one&lt;/a&gt; 的版本号，感觉还挺有意思，格式就是：年.当年发布次数。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;day one version&#34; loading=&#34;lazy&#34; src=&#34;https://joeytat.github.io/user_friendly_version.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;软件的更新频率在很大程度上影响用户是否愿意投入时间和金钱使用该软件。相比常见的语义化版本号，这种版本号显然更用户友好。&lt;/p&gt;
&lt;p&gt;ps: 是的，Day one 的更新历史中有个 2025.1.1。个人猜测或许是因为那次的更新只是一次非常简单的 bug fix，所以团队并不想将其作为“一次发布”记录在案。: ]&lt;/p&gt;</description>
    </item>
    <item>
      <title>2025 week 3</title>
      <link>https://joeytat.github.io/posts/2025_week3/</link>
      <pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week3/</guid>
      <description>&lt;p&gt;这周在日常使用 AI 时产生了两次印象比较深刻的场景。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在家用办公的时候用闲鱼买来的二手 Odyssey G7 显示器发现很卡，一度怀疑是 Mac mini M4 带不动。调整了很多设置都无法解决，问了一下 AI 提示可能是线的问题，结果发现果然是这样。&lt;/li&gt;
&lt;li&gt;玩游戏的时候有一个地方卡住了，向 AI 描述了一下自己在玩的哪款游戏当前的场景是什么，马上就给出了解体方法。产生了一种，游戏攻略网站应该日子不太好过的想法。但话又说回来，如果内容创作者都日子不好过了，高质量的内容产出减少，AI 的学习素材也会受到影响。这是否会形成一种恶性循环？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工作&#34;&gt;工作&lt;/h2&gt;
&lt;p&gt;主要是处理一些前后端数据 mapping 相关的工作。为时间相关的展示业务逻辑添加测试的时候遇到了一个时区转换的“坑”，&lt;del&gt;如果周末有时间准备写一篇博客来记录一下&lt;/del&gt;写了一篇博客来记录《&lt;a href=&#34;../date_formatter_issue&#34;&gt;DateFormatter 静态实例的一个小坑&lt;/a&gt;》。&lt;/p&gt;
&lt;h2 id=&#34;娱乐&#34;&gt;娱乐&lt;/h2&gt;
&lt;p&gt;开始玩 《双人成行》，感觉有相当多的巧思在里面，且很适合一边聊天一边游玩。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2025 week 2</title>
      <link>https://joeytat.github.io/posts/2025_week2/</link>
      <pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week2/</guid>
      <description>&lt;p&gt;2025 week 2&lt;/p&gt;
&lt;p&gt;陪家人去医院请了几天假，工作输入输出都没什么进展。不过这段时间因为 deepseek 的火热，感觉让世界看到了中国科研的潜力，国内大家的信心也得到重振，于是建仓了恒生科技。&lt;/p&gt;
&lt;h2 id=&#34;娱乐&#34;&gt;娱乐&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;《网络迷踪》⭐️⭐️⭐️⭐️
还不错的悬疑片，虽然是好几年前的电影了，但表现手法现在的眼光来看依然很新颖。通过电脑上摄像头的视角以及桌面的录制，来讲述一个父亲寻找自己失踪女儿的故事。同时也算是一部社会工作的科普片？&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>2025 week 1: 为什么开始写周记</title>
      <link>https://joeytat.github.io/posts/2025_week1/</link>
      <pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week1/</guid>
      <description>&lt;p&gt;为了更好地通过记录这个行为来感知时间（开始写周记也是这个目的），研究了一下如何通过 toggl 的 API，现在可以通过 Shortcuts 自动将使用手机上的各种 app 自动分门别类（购物，社交网络，理财）记录使用时间，并且将低于 2 分钟的使用自动归类为 distraction 了。等这套系统再跑一跑完善一下，再来写一下体验和心得。&lt;/p&gt;
&lt;h2 id=&#34;工作&#34;&gt;工作&lt;/h2&gt;
&lt;p&gt;年前被告知晋升没通过，理由是尽管对于交付工作和团队管理都很满意，但因为缺少了在团队之外稳定地输出影响力的事实，所以给拒绝了。得知这一消息多少有点打击积极性，但自己接受得比想象的快，可能和我司晋升之后对薪资涨幅的提升不太明显有关。&lt;/p&gt;
&lt;p&gt;25 年春节后开工第一周，第一天几乎没怎么工作，主要是回忆去年我到底是干什么的。然后第二天生产力爆棚，酣畅淋漓地写了 6 个多小时代码。&lt;/p&gt;
&lt;h2 id=&#34;娱乐&#34;&gt;娱乐&lt;/h2&gt;
&lt;p&gt;这周大部分时间都是放假，看了三部电影一部美剧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;《最后的生还者》⭐️⭐️⭐️⭐️⭐️&lt;br&gt;
无论是人物场景还是剧情对于游戏都是相当好的还原，甚至有超越。但到了长颈鹿的名场面，观察了一下身边人的反应，似乎没有自己当初见到这个场景时所感受到的情绪来得复杂，以及 Sam 自杀之后的那个长长的黑屏时电视倒影里出现自己错愕表情时候的冲击。如果可以，还是推荐体验游戏。代入感会强很多。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《哪吒 2》⭐️⭐️⭐️⭐️⭐️&lt;br&gt;
记得对第一部的评价是过誉了，但这第二部看得是相当爽。国产动画真棒啊。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《好东西》⭐️⭐️⭐️⭐️⭐️&lt;br&gt;
观影过程中有被剧中的单亲妈妈和小孩的相处模式触动到，但两天后已经回忆不起来大部分的剧情细节了，怀疑和电影里角色对话的台词并不像正常人说话那样有关（太过于书面化了）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《封神 2》⭐️⭐️&lt;br&gt;
特效很差，且剧情比较磨磨叽叽。值得一提的是邓婵玉这个角色虽然有一条莫名其妙的感情线，但表现依然很出彩，大陆女演员似乎没多少这个类型的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;输入&#34;&gt;输入&lt;/h2&gt;
&lt;p&gt;看书时间比较少，仅仅 4 小时。主要是去年没看完的《理性思考的艺术》以及《正面管教》。有个变化是听了 &lt;a href=&#34;https://nicetrypod.com&#34;&gt;nice try podcast&lt;/a&gt; 中 cbvivi 说自己坚持了一年时间，晚上睡前不带电子产品进到卧室，选择睡前看纸质书，于是乎准备尝试一下。&lt;/p&gt;
&lt;p&gt;还和 deepseek 聊天聊了 2 小时，感觉用过深度思考模式就回不去了。无奈 deepseek 服务太不稳定，尝试了一下国内的硅基流动也相当慢，基本处于不可用状态。从 X 搜索了一下相关信息，简单调查之后找到了 &lt;a href=&#34;https://openrouter.ai&#34;&gt;openrouter.ai&lt;/a&gt; 这个服务，搭配 OpenCat 使用效果还不错。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2024</title>
      <link>https://joeytat.github.io/posts/2024_overview/</link>
      <pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2024_overview/</guid>
      <description>年终总结</description>
    </item>
    <item>
      <title>构建易维护的 Design System: 为什么 SwiftUI 会是更好的选择</title>
      <link>https://joeytat.github.io/posts/why-swiftui-is-better-at-building-a-design-system/</link>
      <pubDate>Fri, 02 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/why-swiftui-is-better-at-building-a-design-system/</guid>
      <description>通过 SwiftUI 构建 Design System 有哪些优势</description>
    </item>
    <item>
      <title>移动开发中实现 Deep Linking 的 URL Scheme 和 Universal Links 的区别是什么？</title>
      <link>https://joeytat.github.io/posts/differences_between_scheme_and_universal_links/</link>
      <pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/differences_between_scheme_and_universal_links/</guid>
      <description>经历过的 Mobile 项目基本上都有支持 Deep Linking 的需求，每次新项目都会经历向其他端同事和 BA 解释实现 Deep Linking 两种方案的区别，于是就有了这一篇短文。主要是介绍两种方案的优缺点和实现成本差异，并不涉及如何实现的代码步骤。</description>
    </item>
    <item>
      <title>参加 Apple 开发者线上活动是什么样的体验？</title>
      <link>https://joeytat.github.io/posts/apple_swiftui_workshop/</link>
      <pubDate>Mon, 28 Mar 2022 00:00:35 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/apple_swiftui_workshop/</guid>
      <description>记录一下收获到的与 SwiftUI 相关的资料，与一条来自苹果工程师的学习路线。</description>
    </item>
    <item>
      <title>iOS 架构之另一种依赖注入的思路</title>
      <link>https://joeytat.github.io/posts/swift_dependency_injection/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/swift_dependency_injection/</guid>
      <description>介绍了一种相比 protocol 更轻量级更灵活的依赖注入实现</description>
    </item>
    <item>
      <title>Swift 状态管理 —— 如何拆分庞大的 reducer</title>
      <link>https://joeytat.github.io/posts/combining_reducers/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/combining_reducers/</guid>
      <description>利用 keyPath 构建 pullback 来处理 reducer 状态隔离的问题</description>
    </item>
    <item>
      <title>SwiftUI 状态管理 —— Composible Binding</title>
      <link>https://joeytat.github.io/posts/composible_binding/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/composible_binding/</guid>
      <description>如何利用 Enum 以及自定义 KeyPath 来更好地管理 SwiftUI 的状态</description>
    </item>
    <item>
      <title>JavaScript 既然是单线程语言，为什么 setTimeout 不会阻塞线程？</title>
      <link>https://joeytat.github.io/posts/asynchronous-javascript/</link>
      <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/asynchronous-javascript/</guid>
      <description>一个问题简单地理解 Web Browser API，Callback Queue 与 Event Loop 是如何协作的</description>
    </item>
    <item>
      <title>React 进阶模式之复合组件（Compound Component）</title>
      <link>https://joeytat.github.io/posts/compound-component/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/compound-component/</guid>
      <description>什么是复合组件，以及如何让子组件隐式地共享父组件的 props</description>
    </item>
    <item>
      <title>翻译 - 图像优化</title>
      <link>https://joeytat.github.io/posts/optimizing_images/</link>
      <pubDate>Wed, 19 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/optimizing_images/</guid>
      <description>(通过啦～✌️)  发现 SwiftGG 在招人, 需要试译一篇文章. 花了半个下午加上午的时间来翻译, 于是就有了这篇. 不知道能不能通过.</description>
    </item>
    <item>
      <title>Platforms State of the Union(WWDC 2019)</title>
      <link>https://joeytat.github.io/posts/wwdc2019_platforms_state_of_the_union/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/wwdc2019_platforms_state_of_the_union/</guid>
      <description>观看 WWDC 2019 - Platforms State of the Union 的一些笔记</description>
    </item>
    <item>
      <title>如何实现 JavaScript 函数参数必填的支持?</title>
      <link>https://joeytat.github.io/posts/js_required_property/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/js_required_property/</guid>
      <description>&lt;p&gt;JS 在 ES6 的中新增了函数参数指定默认值的支持:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Greeting&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Joeytat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Hello &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Greeting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Hello Joeytat
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那我们就可以利用这一特性, 将一个会抛出异常的方法作为默认参数传递.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Greeting&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;EmptyPropertyException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Hello &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;EmptyPropertyException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;propertyName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;propertyName&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt; 为必填参数`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Greeting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 抛出异常: &amp;#34;Error: name 为必填参数&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样如果没有传递参数就会抛出异常, 并且带有友好的提示了.&lt;/p&gt;</description>
    </item>
    <item>
      <title>2018</title>
      <link>https://joeytat.github.io/posts/2018_overview/</link>
      <pubDate>Fri, 28 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2018_overview/</guid>
      <description>年终总结</description>
    </item>
    <item>
      <title>为什么 Cocoapods 1.5 支持编译静态库之后大家这么高兴?</title>
      <link>https://joeytat.github.io/posts/cocoapods-1.5-static-library/</link>
      <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/cocoapods-1.5-static-library/</guid>
      <description>昨天在 Twitter 上看到 TualatriX 说[把私有库都通过 Cocoapods 编译成静态库之后很爽](https://twitter.com/tualatrix/status/1077166131956264960), 就有点好奇到底是爽在哪里.</description>
    </item>
  </channel>
</rss>
