<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Joeytat&#39;s Dev Log</title>
    <link>https://joeytat.github.io/</link>
    <description>Recent content on Joeytat&#39;s Dev Log</description>
    <generator>Hugo -- 0.147.4</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 21 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://joeytat.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2025 week 15：打字速度影响我和 AI 聊天了</title>
      <link>https://joeytat.github.io/posts/2025_week15/</link>
      <pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week15/</guid>
      <description>&lt;p&gt;这周对日常工作流中使用率占比相当重的 &lt;a href=&#34;https://www.raycast.com/&#34;&gt;Raycast&lt;/a&gt; 进行了一些设置修改。&lt;/p&gt;
&lt;p&gt;起因是 Raycast 订阅过期了，在订阅过期两周前收到邮件说现在续费就给 20% 优惠，但想了想没必要续费。Raycast 提供的 AI 功能我主要用来翻译，语法纠正和润色，chat 极少使用，尽管其启动成本和 chatGPT for mac 一样低。&lt;/p&gt;
&lt;h2 id=&#34;学习双拼&#34;&gt;学习双拼&lt;/h2&gt;
&lt;p&gt;chat 好办，直接切换到 chatGPT。可能是因为新鲜感，和 AI 聊天次数多了不少，突然萌生了应该提高自己打字速度以减少“使用 AI 解决问题”的心智启动成本和更强的“为 AI 提供充足上下文”的意愿。&lt;/p&gt;
&lt;p&gt;说学就学，简单调查之后选择了小鹤双拼。想知道熟练使用双拼之后，打字速度能提升多少，所以还做了个全拼和双拼的速度测试对比。（测试地址 &lt;a href=&#34;https://dazi.kukuw.com&#34;&gt;https://dazi.kukuw.com&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;￼&lt;img alt=&#34;shuang pin&#34; loading=&#34;lazy&#34; src=&#34;https://joeytat.github.io/shuang-pin.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;社区插件代替订阅&#34;&gt;社区插件代替订阅&lt;/h2&gt;
&lt;p&gt;但「用预设 prompt 处理选中的文本后再填充到输入框」这活儿依然是 Raycast 最快。调查了一下发现可以用 &lt;a href=&#34;https://www.raycast.com/ViGeng/deepseeker&#34;&gt;Deepseek Quick Actions&lt;/a&gt; 和 &lt;a href=&#34;https://www.raycast.com/EvanZhouDev/raycast-gemini&#34;&gt;Google Gemini&lt;/a&gt; 社区插件填自己的 key 来代替。&lt;/p&gt;
&lt;p&gt;尝试了一下发现尽管 Gemini 的 Key 有免费版可以使用，且速度极快但失败率实在太高了。而 deepseek v3 速度虽然有点慢（和 raycast AI 差不多但不如 Gemini），但稳定且便宜，几天用了一百来次不过 2 毛钱。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;deepseek usage&#34; loading=&#34;lazy&#34; src=&#34;https://joeytat.github.io/deepseek-usage.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;产出&#34;&gt;产出&lt;/h1&gt;
&lt;p&gt;用 &lt;a href=&#34;https://www.alexcodes.app/auth/signup?ref=joeyqaq-ORWI0Y&#34;&gt;Alex for Xcode&lt;/a&gt; 以 vibe coding 的方式开启了一个 side project，非常好用！后面有空单独写一下。&lt;/p&gt;
&lt;h1 id=&#34;娱乐&#34;&gt;娱乐&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;《爱死机》 第四季 ⭐️ ⭐️ ⭐️&lt;br&gt;
没有什么出彩的，可能是期望很高。但写周记的时候，只记得家用机器人的吐槽那一集了。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>2025 week 14: 反馈循环</title>
      <link>https://joeytat.github.io/posts/2025_week14/</link>
      <pubDate>Wed, 14 May 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week14/</guid>
      <description>&lt;p&gt;这周主要工作在重构上。之前有两个高度重合模块需求出来的时间间隔有点大，且过程中产品和开发沟通不足，导致两个模块实现过程中产生了不少冗余代码。&lt;/p&gt;
&lt;p&gt;这种时候 code diff / PR review 经常发现，core contributor 们在重构议题上有很强的「技术卓越」倾向，同时当可扩展性和可维护性两个词搬出来时，很难从技术角度说是错的，然后大家陷入一轮又一轮的争论。&lt;/p&gt;
&lt;p&gt;考虑到这两个特质在复杂业务项目中实现的成本，以及过往太多实现了高可复用模块但并未发挥作用的经历。个人感觉其实更好的做法先放下技术人视角，和干系人（老板）沟通，确认真实的验收标准，严格执行，交付，然后开始进入下一个任务。&lt;/p&gt;
&lt;p&gt;把这个反馈循环牢记于心，一方面可以节约大量不必要的讨论精力和实现成本，另一方面也可以避免出现明明花费了大量时间精力，但老板不认可成果的情况出现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2025 week 13: 集成联调</title>
      <link>https://joeytat.github.io/posts/2025_week13/</link>
      <pubDate>Wed, 07 May 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week13/</guid>
      <description>&lt;p&gt;近半年都在进行 redesign 相关的工作，除了 UI 从 UIKit 切换到 SwiftUI，还有网络层的切换，从 restful 切换到 GraphQL。因为六月份就要上线，现在就开始进行后端联调及各种功能的集成。即使团队已经很“敏捷”，有各种沟通对齐的会议，但到了这种时候也会发现有很多可以改进的事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跨功能模块的需求，因为沟通问题，到集成的时候才发现没有人负责&lt;/li&gt;
&lt;li&gt;完成较快的模块，团队成员出现空转，等着集成，但集成的时候又发现其实有功能缺失&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;个人认为是因为很多团队成员都在远程办公导致线上对齐会议参与度不高造成的，但感觉很难让大家都在会议中全程投入精力去了解别人在干什么，一般都更新完自己的就，就开始做其他事情了。&lt;/p&gt;
&lt;h1 id=&#34;产出&#34;&gt;产出&lt;/h1&gt;
&lt;p&gt;和设计师朋友喵喵聊了聊自己想到的几个 side project 的主意，其中一个被选中了。对方很快就做出了设计稿，希望可以在闲暇时间做一下试试看。&lt;/p&gt;
&lt;h1 id=&#34;娱乐&#34;&gt;娱乐&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;《塞尔达：王国之泪》&lt;br&gt;
通勤路地铁里就会打开玩一玩，40 分钟逛几个神庙探索一小块地区就会觉得很开心。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《搏击俱乐部》 ⭐️ ⭐️ ⭐️ ⭐️ ⭐️&lt;br&gt;
时隔数年再看一次，还是很喜欢。比如片尾插入的几帧 nice big cock 这个事儿，就感觉很酷。但以前主要是看像狮子一样的布拉德·皮特，现在是看爱德华·诺顿的表演。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《阳光灿烂的日子》 ⭐️ ⭐️ ⭐️ ⭐️ ⭐️&lt;br&gt;
小时候看觉得大院儿生活也太棒了，现在看感觉很燥热，而且发现姜文拍片很喜欢同一个事情给很多重复镜头，比如夏雨拿着望远镜转圈，在屋顶来回爬。在《让子弹飞》里也是，让马车拉着枪来回跑，重复镜头很多很多，个人感觉会容易累。不过宁静依然和记忆中一样好看。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《诡才之道》 ⭐️ ⭐️&lt;br&gt;
题材相当好，从鬼的视角来讲如何吓人的。比如闹鬼的时候，鬼是如何让灯光不停闪烁，是如何让人打不开原本可以打开的门的。但当设定讲完了之后，导演就想讲个青春期女生在鬼友帮助下如何成长的励志故事了，一下落得相当俗套。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>2025 week 12: Showcase</title>
      <link>https://joeytat.github.io/posts/2025_week12/</link>
      <pubDate>Sun, 27 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week12/</guid>
      <description>&lt;p&gt;本周工作产出主要是准备 showcase 及修复 iOS 15 UIHostingViewController 在 UINavigationController 层级下可能会出现 navigation bar 无法隐藏的问题。&lt;/p&gt;
&lt;h1 id=&#34;输入&#34;&gt;输入&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;《盲人钟表匠》&lt;br&gt;
当人们走在路上如果看到一块构造奇怪的石头，无论其构造如何诡异，依然会有概率相信这样一块石头是自然产物。但如果在路上捡到了一块钟表，则极难让人相信，这是自然产物，原因在于钟表的复杂性。那么相比起身体构造，钟表的精细程度显然不值一提，也就很难相信人是自然产物，而不是神刻意制造出来的。
《盲人钟表匠》 这本书就是讲进化论的自然选择，是如何反驳这个在达尔文出现之前，最有影响力的支持”上帝存在“的论证——「设计论证」。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;娱乐&#34;&gt;娱乐&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;《辐射》 ⭐️ ⭐️ ⭐️ ⭐️&lt;br&gt;
剧情一般，没能把各种避难所的荒诞以及地面各势力的斗争体完全体现出来。但场景道具服装还原极佳！再玩一次辐射 4 是不可能了，但很期待新辐射。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《苦尽柑来遇见你》&lt;br&gt;
本来对韩剧不太感兴趣，但时间线上看到太多人说好，开始看看。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>2025 week 11: 《Tiny Experiences》 = 但行好事莫问前程 &#43; 量变引起质变</title>
      <link>https://joeytat.github.io/posts/2025_week11/</link>
      <pubDate>Thu, 24 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week11/</guid>
      <description>&lt;p&gt;突然得到消息需要为 CTO 准备 showcase，后来得知发布日期的改变和 showcase 都是因为项目合同可能会出现一些变化，所以是工作比较紧凑的一周。&lt;/p&gt;
&lt;p&gt;周末小朋友被他外公外婆带出去玩了，得了两天空闲。研究了一下如何更好地利用懒猫微服 NAS。但因为自己对数据安全的敏感，不太乐意往里面装不清楚来历的东西，而自己又嫌弃麻烦所以也没有太多成果，甚至开始思考这个东西到底是否适合自己了。&lt;/p&gt;
&lt;h1 id=&#34;输入&#34;&gt;输入&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;《Tiny Experiences》
又一次受到 cbvivi 的影响，看他在读《Tiny Experiences》这本书，发起了一个要连续更新博客一百天的活动。这本书我只看了开头，个人感觉核心概念和但行好事莫问前程很像。先用一个契约把事儿做了，做的过程中自然会有好事发生（量变引起质变）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时相当喜欢 cbvivi 在这篇博客最后面的引用：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you write, you think better. When you think better, you create better.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;娱乐&#34;&gt;娱乐&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;《塞尔达：王国之泪》 ⭐️ ⭐️ ⭐️ ⭐️ ⭐️&lt;br&gt;
周日硬生生玩了十个小时，把地底的很大一片区域都探索了，获得了一套衣服。期间没有一分钟不是开心的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《白莲花度假村》第一季 ⭐️ ⭐️ ⭐️ ⭐️ ⭐️&lt;br&gt;
很戏剧的一部短剧。值得一提的是其中一个主演是《Why Women Kill》的达达里奥，漂亮的眼睛颜色让人感觉她又不知所措但又带了一些神经质。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>2025 week 10: 重拾《塞尔达： 王国之泪》</title>
      <link>https://joeytat.github.io/posts/2025_week10/</link>
      <pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week10/</guid>
      <description>&lt;p&gt;因为被要求做一个优先级很高的任务，所以这周很舒服，统计的工作时间有一半都专注于代码。&lt;/p&gt;
&lt;h1 id=&#34;娱乐&#34;&gt;娱乐&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;《塞尔达：王国之泪》 ⭐️ ⭐️ ⭐️ ⭐️ ⭐️&lt;br&gt;
王国之泪刚刚发售的时候就购入了一台 NS oled，但对它投入的时间其实远不如前作荒野之息。在看本周 NS 2 的发布会时。产生了强烈的购买欲望，但稍微冷静之后，就觉得这台 NS oled 并没有物尽其用。顺便趁着上周去九寨沟回忆起来了许多玩荒野之息时候的快乐时光，又把王国之泪捡了起来，玩了相当开心的 3 个小时。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《黑镜》第七季 ⭐️ ⭐️ ⭐️ ⭐️ ⭐️&lt;br&gt;
一共 6 集，很喜欢讲妻子受伤后被迫上传大脑到服务器，结果陷入订阅服务陷阱的第一集。和第五集，通过回溯照片解除自己去世前任误会。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《让子弹飞》⭐️ ⭐️ ⭐️ ⭐️&lt;br&gt;
重看了一次，前半部分一如既往的好看，但最后半小时节奏太拖拉了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>2025 week 9: 记忆与现实</title>
      <link>https://joeytat.github.io/posts/2025_week9/</link>
      <pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week9/</guid>
      <description>&lt;p&gt;清明节去九寨沟玩了一趟。&lt;/p&gt;
&lt;p&gt;小学时候和妈妈去过一次，还记得周围大人都穿着厚厚的衣服，但自己穿着短袖尽管冷得哆嗦，可听着旁人说“你看这个小伙子身体真好”，又觉得得意的场景。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;jiuzhai&#34; loading=&#34;lazy&#34; src=&#34;https://joeytat.github.io/jiuzhai.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;景点也只记得一个五色海，当时同行有位大叔还问导游：“这水能不能喝？”，导游顿了顿答：“别喝太多”。&lt;/p&gt;
&lt;p&gt;现在再看到这个景点，感觉已经和记忆中完全不同，连印象中的大叔和导游也无处安置了。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;jiuzhai and zelda&#34; loading=&#34;lazy&#34; src=&#34;https://joeytat.github.io/jiuzhai-zelda.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;而且看到这样有山有树的地方，会立刻联想到几年前操纵着林克爬山滑翔的场景，进而想起当时玩荒野之息的愉快体验。相比玩了数倍时长于荒野之息的一款开放世界手游，却几乎不能让我在现实生活中产生共鸣。&lt;/p&gt;
&lt;p&gt;想来或许和游戏制作人的目的有关，手游心思花在设计各种刺激点来让人氪金，游戏内容本身更像是吸引玩家入门的东西。但单机游戏则就是以做出好的游戏内容为主要目标。&lt;/p&gt;
&lt;h1 id=&#34;input&#34;&gt;Input&lt;/h1&gt;
&lt;p&gt;本周没有太多输入和产出，但在高铁上舒舒服服地看完了一本小说。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《恶意》 ⭐️⭐️⭐️⭐️⭐️ &lt;br&gt;
东野圭吾的侦探小说阅读体验一直都很好。看到最后才会意识到开头的性格描写产生的印象会有多深刻，第一印象确实很重要啊。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>2025 week 8: 入手懒猫微服</title>
      <link>https://joeytat.github.io/posts/2025_week8/</link>
      <pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week8/</guid>
      <description>&lt;p&gt;眼馋了朋友的 NAS 已久，自己调研了 4 个小时之后，机缘巧合之下，在 x.com 上通过&lt;a href=&#34;https://lazycat.cloud&#34;&gt;懒猫微服&lt;/a&gt;创始人 &lt;a href=&#34;https://x.com/manateelazycat&#34;&gt;Andy Stewart&lt;/a&gt;，得到了一张优惠券购入了这个看起来蛮贵的机器。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;lazycat&#34; loading=&#34;lazy&#34; src=&#34;https://joeytat.github.io/lazycat.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;但目前仅仅是用来同步照片及网盘，还没有发掘其全部的功能。饶是如此也能在未来节约每个月 68 块钱的 iCloud 税。&lt;/p&gt;
&lt;h1 id=&#34;input&#34;&gt;Input&lt;/h1&gt;
&lt;p&gt;听 《Cortex》 主播之一 Myke 将要生小孩，Grey 推荐了几本书，被其中一本《&lt;a href=&#34;https://www.amazon.com.au/Selfish-Reasons-Have-More-Kids/dp/0465028616&#34;&gt;Selfish Reasons to Have More Kids&lt;/a&gt;》 给吸引了。大家聊起生更多小孩这事时，通常都和社会福祉挂钩一起聊，但个人聊到这个话题时，一般会咂舌说「一个都够受了，哪敢要要多的」。那有什么站的住脚的「自私」理由应该多要一些小孩呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>2025 week 7: 如果是 Lin 的话，他现在会怎么做呢？</title>
      <link>https://joeytat.github.io/posts/2025_week7/</link>
      <pubDate>Mon, 24 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week7/</guid>
      <description>&lt;p&gt;工作时间只有 35% 写代码，其他的时间要不然是在会议上，要不然是各个群里灌水了，自觉状态不是很好。&lt;/p&gt;
&lt;p&gt;这时候会想起来上个项目共事的同事 Lin。客户对他的评价就是——天生的领导者。对此的理解是，因为他对于自己工作专业态度的一致性，以至于同组的成员很容易就受到他的影响，整个团队的工作效率也被拔高。&lt;/p&gt;
&lt;p&gt;脑子里立刻能回忆起来的就有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Code Diff 及开会基本上会合上电脑，认真听他人发言，且与发言人产生互动&lt;/li&gt;
&lt;li&gt;Slack 中对于团队内部及跨团队交流非常及时&lt;/li&gt;
&lt;li&gt;承接任务之后会持续保持后续更新，符合「件件有着落，事事有回音」的标准&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开始尝试着在自觉工作不在状态时想一下，如果是 Lin 的话，他现在会怎么做呢？&lt;/p&gt;
&lt;h2 id=&#34;input&#34;&gt;Input&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://nshipster.com/model-context-protocol/?utm_source=substack&amp;amp;utm_medium=email&#34;&gt;Model Context Protocol (MCP)&lt;/a&gt;&lt;br&gt;
Mattt 写的一篇介绍 MCP 到底解决什么问题以及如何运作的文章，例子相当通俗易懂。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://world.hey.com/dhh/the-most-interesting-people-4950913f&#34;&gt;The most interesting people&lt;/a&gt;&lt;br&gt;
DHH 所写的「到底为什么要有一个小孩」。举了一个自己很喜欢的例子。当有了自己的小孩之后，就像是得到了一个机会可以观看世界上最有趣的人的演出一般。这场演出极其精彩，但作为父母你并没有办法说服其他人和你有相同的感受。有小孩之前，我应该是无法理解这种比喻的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>2025 week 6: Github Copilot 复杂项目初体验</title>
      <link>https://joeytat.github.io/posts/2025_week6/</link>
      <pubDate>Mon, 17 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week6/</guid>
      <description>&lt;p&gt;周一一大早发现 Github Copilot license 申请下来之后就迫不及待开始在项目上体验了。尽管之前在自己的 side project 上使用过，但在澳洲最大的流媒体应用这个量级的项目上，还是头一遭。&lt;/p&gt;
&lt;p&gt;先说结论，目前个人感觉对生产代码的编写提速帮助不算大，但通过 chat 来了解代码结构及技术决策分析会有奇效。&lt;/p&gt;
&lt;p&gt;因为日常工作中，需求分析及 Tasking 的时间占 80%，实际写代码的时间可能只有 20%。此前还和同事打趣，写完了 issue 文档基本上等于代码都写完了。所以现在有了一个具有整个 codebase 上下文的 AI 来辅助阅读及理解代码，整体速率的提升还是比较明显。
￼&lt;img alt=&#34;chat&#34; loading=&#34;lazy&#34; src=&#34;https://joeytat.github.io/copilot-chat.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;但在如此复杂的项目结构及复杂业务上下文的场景下，如果想要通过 Copilot Edits 帮助实现代码，就需要把指令拆分得非常小且明确。即使如此也还是要经过很多轮的验证。有这个时间，自己写早就写完了。&lt;/p&gt;
&lt;h2 id=&#34;娱乐&#34;&gt;娱乐&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;杀手寓言 ⭐️⭐️&lt;br&gt;
因为在社交媒体上看到了该片很酷的动作场景片段才看的电影，但实际上体验是：搞笑梗很烂，情节俗套且拖沓。剧情发展从头到尾没有一丝丝意外。精神不正常的角色都演得不错，但太多了，是个反叛就神经质，导致同质化比较严重，就审美疲劳了。
一分给动作场景，一分给变态反派们。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>2025 week 5: 去日本</title>
      <link>https://joeytat.github.io/posts/2025_week5/</link>
      <pubDate>Mon, 10 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week5/</guid>
      <description>&lt;p&gt;上周写完自己对于 AI 可能产生的对程序员这个职业的影响之后，无独有偶，好几个程序员朋友也和我聊起了这个话题。看起来大家都有相关的顾虑和想法。有个好消息是，由于我一直在做咨询交付类的项目，所以在使用任何 AI 之前都需要客户的同意，但因为知识产权的关系，使用 AI 辅助编程很难推进，只能自己脱敏之后通过 chat 的方式来运用。但最近的项目客户已经同意在接下来的工作中使用 AI 辅助的 IDE 来进行日常交付了，这下或许可以深度感受到 AI 给职业带来的影响了。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;akihabara&#34; loading=&#34;lazy&#34; src=&#34;https://joeytat.github.io/akihabara.jpg&#34;&gt;
因为去了一趟日本（4 天），所以没有太多的工作产出或是输出，不过在秋叶原见了一些市面，甚至产生了如果国内有这样的地方和文化，自己努力赚钱的意愿会更强的想法。&lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;输入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;《正面管教》 ⭐️⭐️⭐️⭐️⭐️&lt;br&gt;
很多可实操的和小朋友相处的技巧及原理解释。落笔此刻印象深刻的就有：
&lt;ul&gt;
&lt;li&gt;为什么制定规则之后孩子会产生反叛行为&lt;/li&gt;
&lt;li&gt;大人如何教育孩子承担自己的责任&lt;/li&gt;
&lt;li&gt;发生分歧时，如何展示出对事态的尊重&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然是教育小孩的书，但其中很多的方法和道理对于成年人之间相处也非常适用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《第七天》 ⭐️⭐️⭐️⭐️⭐️&lt;br&gt;
尽管故事的时事感太强（医疗事故，火灾，食品安全），导致有点出戏。但看到描述铁道工人父亲的部分，也让我看得差点哭出来。其中很多父子相处的描述都和自己记忆中父亲独自照顾年幼的我极其相似。同时在看到主角被父亲放在石头上坐着晃荡着双脚的时候也会想起自己的儿子。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果真的有这么一个死无葬身之地，我的父亲应该会在那里等着我吧。很想他。&lt;/p&gt;
&lt;h2 id=&#34;娱乐&#34;&gt;娱乐&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;长发公主 ⭐️⭐️⭐️⭐️&lt;br&gt;
中规中矩的迪士尼公主，特殊之处在于男主角较为不同寻常，是个小偷。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>2025 week 4: 程序员的不可替代性</title>
      <link>https://joeytat.github.io/posts/2025_week4/</link>
      <pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week4/</guid>
      <description>&lt;h2 id=&#34;工作&#34;&gt;工作&lt;/h2&gt;
&lt;p&gt;算是在 deadline 驱动下，度过了生产力爆棚的一周（请了一天假），每天实际写代码的时间达到了 7 小时。究其原因，只因为老板说有个新的提案要做时，加了一句“I personally think you are the best to work on it”，就卯足了劲儿赶在他需要的时间前，把手上的工作都快速处理好了。我真是容易满足啊 🫠&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;输出&lt;/h2&gt;
&lt;p&gt;周末花了点时间写了两篇博客&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DateFormatter 静态实例的一个小坑&lt;/li&gt;
&lt;li&gt;面向用户的版本号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在写&lt;a href=&#34;../user_friendly_version&#34;&gt;《面向用户的版本号》&lt;/a&gt;时，想起几年前曾有一个想法——编写一个系列，帮助非技术背景的 PM、BA、UX 或相关干系人理解移动开发领域的技术选型差异可能带来的业务影响，比如&lt;a href=&#34;../differences_between_scheme_and_universal_links&#34;&gt;《移动开发中实现 Deep Linking 的 URL Scheme 和 Universal Links 的区别是什么？》&lt;/a&gt;这篇文章。&lt;/p&gt;
&lt;p&gt;现在这种文章存在的意义似乎没有了，通过 AI 就能够图（mermaid）文并茂解释得更好，且有足够的耐心来解答读者的任何疑虑。可话又说回来，非技术背景的人在不知道有哪些技术方案可能会造成差异的情况下，是无法提出这样的问题的。&lt;/p&gt;
&lt;p&gt;这就是我认为程序员这个工种短时间内无法被取代的原因：你没办法让 AI 帮助完成&lt;strong&gt;你不知道你不知道&lt;/strong&gt;的任务。&lt;/p&gt;
&lt;p&gt;即使在有 AI 加持的现在，依然需要具备相当多的软件开发知识，才能够在众多方案中甄别出相对合理的方案，由此从生产到部署再到维护，完成一个复杂系统的构建。诚然，学习能力足够强的人可以通过边做边学的方式来让 AI 构建，但走完了整个流程的他，其实已经通过 AI 帮助，在“做中学”的过程中成为了一个 AI 时代的程序员。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AI 时代的程序员：明白各种软件开发领域名词背后的含义，但并不需要自己去实现的人。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这种“做中学”产生的副作用（掌握软件开发知识），也并不是每个需要发布软件的人都想要的，因为它相当费神耗时，所以我依然认为程序员这个工种在“将想法变成现实”的路上，具有较高程度的不可替代性。&lt;/p&gt;
&lt;p&gt;而 “工作的可被 AI 替代性” 这条线再具体一些，就是工作的产出物是否具有易于描述的创造流程，以及清晰的验收标准。输入和输出越复杂，描述和验收所需要的知识越多，工作就越不可被替代。&lt;/p&gt;
&lt;h2 id=&#34;娱乐&#34;&gt;娱乐&lt;/h2&gt;
&lt;p&gt;玩了两小时《双人成行》，开始觉得尽管画面好看，游戏体验也不错，有很多的小巧思。但不会产生沉迷的感觉，说放下就放下了，甚至会产生玩了两个场景就有点疲了的感觉。当然再拿起来也没有什么负担。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DateFormatter 静态实例的一个小坑</title>
      <link>https://joeytat.github.io/posts/date_formatter_issue/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/date_formatter_issue/</guid>
      <description>&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;目前开发的 app 主要服务于澳洲用户，开发团队由中澳两地开发人员组成，所以写和 DateFormatter 相关测试时，通常会指定 Calendar 所处时区。否则可能出现测试在本地运行完美通过，但澳洲同事本地或者 CI 上挂掉的情况出现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mockCalendar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Calendar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;identifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iso8601&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mockDate&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mockCalendar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DateComponents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2025&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;month&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 如果跑测试时候的时区是 Australia/Sydney，那么生成的日期是 02 Mar 09:00&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;humanizedDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mockDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;02 Mar 12:00”) // ❌
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要解决这个问题，通过指定 Calendar 及 DateFormatter 的时区为同一时区即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;var mockCalendar = Calendar(identifier: .iso8601)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;+ mockCalendar.timeZone = TimeZone(identifier: &amp;#34;Australia/Sydney&amp;#34;)!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;let formatter = DateFormatter()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;+ formatter.dateFormat.timeZone = mockCalendar.timeZone
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;let mockDate = mockCalendar.date(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  from: DateComponents(year: 2025, month: 3, day: 2, hour: 12)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#expect(humanizedDate(date: mockDate, formatter: formatter) == &amp;#34;02 Mar 12:00”) // ✅
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;优化&#34;&gt;优化&lt;/h2&gt;
&lt;p&gt;但在生产代码中考虑到 DateFormatter 在使用的时候如果不重用实例，则会额外耗费十几倍的时间。
&lt;img alt=&#34;how-expensive-is-dateformatter-when-using&#34; loading=&#34;lazy&#34; src=&#34;https://joeytat.github.io/date-formatter-time-consuming.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>面向用户的版本号</title>
      <link>https://joeytat.github.io/posts/user_friendly_version/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/user_friendly_version/</guid>
      <description>&lt;p&gt;日常开发接触能接触到的版本号方案通常就是语义化版本（构建号版本）：&lt;/p&gt;
&lt;p&gt;语义化版本大致是：主版本号.次版本号.修订号（1.2.3）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主版本号（Major）：有不向后兼容的 API 更改或重大功能更新时递增。&lt;/li&gt;
&lt;li&gt;次版本号（Minor）：有新功能但仍保持向后兼容时递增。&lt;/li&gt;
&lt;li&gt;修订号（Patch）：当软件进行向后兼容的问题修复时递增。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;构建号更简单，每次构建时自动递增。通常是团队内部用来定位问题使用，外部不可见。&lt;/p&gt;
&lt;p&gt;今天偶然发现了用了好几年的日记 app &lt;a href=&#34;https://dayoneapp.com&#34;&gt;Day one&lt;/a&gt; 的版本号，感觉还挺有意思，格式就是：年.当年发布次数。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;day one version&#34; loading=&#34;lazy&#34; src=&#34;https://joeytat.github.io/user_friendly_version.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;软件的更新频率在很大程度上影响用户是否愿意投入时间和金钱使用该软件。相比常见的语义化版本号，这种版本号显然更用户友好。&lt;/p&gt;
&lt;p&gt;ps: 是的，Day one 的更新历史中有个 2025.1.1。个人猜测或许是因为那次的更新只是一次非常简单的 bug fix，所以团队并不想将其作为“一次发布”记录在案。: ]&lt;/p&gt;</description>
    </item>
    <item>
      <title>2025 week 3</title>
      <link>https://joeytat.github.io/posts/2025_week3/</link>
      <pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week3/</guid>
      <description>&lt;p&gt;这周在日常使用 AI 时产生了两次印象比较深刻的场景。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在家用办公的时候用闲鱼买来的二手 Odyssey G7 显示器发现很卡，一度怀疑是 Mac mini M4 带不动。调整了很多设置都无法解决，问了一下 AI 提示可能是线的问题，结果发现果然是这样。&lt;/li&gt;
&lt;li&gt;玩游戏的时候有一个地方卡住了，向 AI 描述了一下自己在玩的哪款游戏当前的场景是什么，马上就给出了解体方法。产生了一种，游戏攻略网站应该日子不太好过的想法。但话又说回来，如果内容创作者都日子不好过了，高质量的内容产出减少，AI 的学习素材也会受到影响。这是否会形成一种恶性循环？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工作&#34;&gt;工作&lt;/h2&gt;
&lt;p&gt;主要是处理一些前后端数据 mapping 相关的工作。为时间相关的展示业务逻辑添加测试的时候遇到了一个时区转换的“坑”，&lt;del&gt;如果周末有时间准备写一篇博客来记录一下&lt;/del&gt;写了一篇博客来记录《&lt;a href=&#34;../date_formatter_issue&#34;&gt;DateFormatter 静态实例的一个小坑&lt;/a&gt;》。&lt;/p&gt;
&lt;h2 id=&#34;娱乐&#34;&gt;娱乐&lt;/h2&gt;
&lt;p&gt;开始玩 《双人成行》，感觉有相当多的巧思在里面，且很适合一边聊天一边游玩。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2025 week 2</title>
      <link>https://joeytat.github.io/posts/2025_week2/</link>
      <pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week2/</guid>
      <description>&lt;p&gt;2025 week 2&lt;/p&gt;
&lt;p&gt;陪家人去医院请了几天假，工作输入输出都没什么进展。不过这段时间因为 deepseek 的火热，感觉让世界看到了中国科研的潜力，国内大家的信心也得到重振，于是建仓了恒生科技。&lt;/p&gt;
&lt;h2 id=&#34;娱乐&#34;&gt;娱乐&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;《网络迷踪》⭐️⭐️⭐️⭐️
还不错的悬疑片，虽然是好几年前的电影了，但表现手法现在的眼光来看依然很新颖。通过电脑上摄像头的视角以及桌面的录制，来讲述一个父亲寻找自己失踪女儿的故事。同时也算是一部社会工作的科普片？&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>2025 week 1: 为什么开始写周记</title>
      <link>https://joeytat.github.io/posts/2025_week1/</link>
      <pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2025_week1/</guid>
      <description>&lt;p&gt;为了更好地通过记录这个行为来感知时间（开始写周记也是这个目的），研究了一下如何通过 toggl 的 API，现在可以通过 Shortcuts 自动将使用手机上的各种 app 自动分门别类（购物，社交网络，理财）记录使用时间，并且将低于 2 分钟的使用自动归类为 distraction 了。等这套系统再跑一跑完善一下，再来写一下体验和心得。&lt;/p&gt;
&lt;h2 id=&#34;工作&#34;&gt;工作&lt;/h2&gt;
&lt;p&gt;年前被告知晋升没通过，理由是尽管对于交付工作和团队管理都很满意，但因为缺少了在团队之外稳定地输出影响力的事实，所以给拒绝了。得知这一消息多少有点打击积极性，但自己接受得比想象的快，可能和我司晋升之后对薪资涨幅的提升不太明显有关。&lt;/p&gt;
&lt;p&gt;25 年春节后开工第一周，第一天几乎没怎么工作，主要是回忆去年我到底是干什么的。然后第二天生产力爆棚，酣畅淋漓地写了 6 个多小时代码。&lt;/p&gt;
&lt;h2 id=&#34;娱乐&#34;&gt;娱乐&lt;/h2&gt;
&lt;p&gt;这周大部分时间都是放假，看了三部电影一部美剧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;《最后的生还者》⭐️⭐️⭐️⭐️⭐️&lt;br&gt;
无论是人物场景还是剧情对于游戏都是相当好的还原，甚至有超越。但到了长颈鹿的名场面，观察了一下身边人的反应，似乎没有自己当初见到这个场景时所感受到的情绪来得复杂，以及 Sam 自杀之后的那个长长的黑屏时电视倒影里出现自己错愕表情时候的冲击。如果可以，还是推荐体验游戏。代入感会强很多。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《哪吒 2》⭐️⭐️⭐️⭐️⭐️&lt;br&gt;
记得对第一部的评价是过誉了，但这第二部看得是相当爽。国产动画真棒啊。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《好东西》⭐️⭐️⭐️⭐️⭐️&lt;br&gt;
观影过程中有被剧中的单亲妈妈和小孩的相处模式触动到，但两天后已经回忆不起来大部分的剧情细节了，怀疑和电影里角色对话的台词并不像正常人说话那样有关（太过于书面化了）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《封神 2》⭐️⭐️&lt;br&gt;
特效很差，且剧情比较磨磨叽叽。值得一提的是邓婵玉这个角色虽然有一条莫名其妙的感情线，但表现依然很出彩，大陆女演员似乎没多少这个类型的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;输入&#34;&gt;输入&lt;/h2&gt;
&lt;p&gt;看书时间比较少，仅仅 4 小时。主要是去年没看完的《理性思考的艺术》以及《正面管教》。有个变化是听了 &lt;a href=&#34;https://nicetrypod.com&#34;&gt;nice try podcast&lt;/a&gt; 中 cbvivi 说自己坚持了一年时间，晚上睡前不带电子产品进到卧室，选择睡前看纸质书，于是乎准备尝试一下。&lt;/p&gt;
&lt;p&gt;还和 deepseek 聊天聊了 2 小时，感觉用过深度思考模式就回不去了。无奈 deepseek 服务太不稳定，尝试了一下国内的硅基流动也相当慢，基本处于不可用状态。从 X 搜索了一下相关信息，简单调查之后找到了 &lt;a href=&#34;https://openrouter.ai&#34;&gt;openrouter.ai&lt;/a&gt; 这个服务，搭配 OpenCat 使用效果还不错。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2024</title>
      <link>https://joeytat.github.io/posts/2024_overview/</link>
      <pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2024_overview/</guid>
      <description>年终总结</description>
    </item>
    <item>
      <title>构建易维护的 Design System: 为什么 SwiftUI 会是更好的选择</title>
      <link>https://joeytat.github.io/posts/why-swiftui-is-better-at-building-a-design-system/</link>
      <pubDate>Fri, 02 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/why-swiftui-is-better-at-building-a-design-system/</guid>
      <description>通过 SwiftUI 构建 Design System 有哪些优势</description>
    </item>
    <item>
      <title>移动开发中实现 Deep Linking 的 URL Scheme 和 Universal Links 的区别是什么？</title>
      <link>https://joeytat.github.io/posts/differences_between_scheme_and_universal_links/</link>
      <pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/differences_between_scheme_and_universal_links/</guid>
      <description>经历过的 Mobile 项目基本上都有支持 Deep Linking 的需求，每次新项目都会经历向其他端同事和 BA 解释实现 Deep Linking 两种方案的区别，于是就有了这一篇短文。主要是介绍两种方案的优缺点和实现成本差异，并不涉及如何实现的代码步骤。</description>
    </item>
    <item>
      <title>参加 Apple 开发者线上活动是什么样的体验？</title>
      <link>https://joeytat.github.io/posts/apple_swiftui_workshop/</link>
      <pubDate>Mon, 28 Mar 2022 00:00:35 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/apple_swiftui_workshop/</guid>
      <description>记录一下收获到的与 SwiftUI 相关的资料，与一条来自苹果工程师的学习路线。</description>
    </item>
    <item>
      <title>iOS 架构之另一种依赖注入的思路</title>
      <link>https://joeytat.github.io/posts/swift_dependency_injection/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/swift_dependency_injection/</guid>
      <description>介绍了一种相比 protocol 更轻量级更灵活的依赖注入实现</description>
    </item>
    <item>
      <title>Swift 状态管理 —— 如何拆分庞大的 reducer</title>
      <link>https://joeytat.github.io/posts/combining_reducers/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/combining_reducers/</guid>
      <description>利用 keyPath 构建 pullback 来处理 reducer 状态隔离的问题</description>
    </item>
    <item>
      <title>SwiftUI 状态管理 —— Composible Binding</title>
      <link>https://joeytat.github.io/posts/composible_binding/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/composible_binding/</guid>
      <description>如何利用 Enum 以及自定义 KeyPath 来更好地管理 SwiftUI 的状态</description>
    </item>
    <item>
      <title>JavaScript 既然是单线程语言，为什么 setTimeout 不会阻塞线程？</title>
      <link>https://joeytat.github.io/posts/asynchronous-javascript/</link>
      <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/asynchronous-javascript/</guid>
      <description>一个问题简单地理解 Web Browser API，Callback Queue 与 Event Loop 是如何协作的</description>
    </item>
    <item>
      <title>React 进阶模式之复合组件（Compound Component）</title>
      <link>https://joeytat.github.io/posts/compound-component/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/compound-component/</guid>
      <description>什么是复合组件，以及如何让子组件隐式地共享父组件的 props</description>
    </item>
    <item>
      <title>翻译 - 图像优化</title>
      <link>https://joeytat.github.io/posts/optimizing_images/</link>
      <pubDate>Wed, 19 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/optimizing_images/</guid>
      <description>(通过啦～✌️)  发现 SwiftGG 在招人, 需要试译一篇文章. 花了半个下午加上午的时间来翻译, 于是就有了这篇. 不知道能不能通过.</description>
    </item>
    <item>
      <title>Platforms State of the Union(WWDC 2019)</title>
      <link>https://joeytat.github.io/posts/wwdc2019_platforms_state_of_the_union/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/wwdc2019_platforms_state_of_the_union/</guid>
      <description>观看 WWDC 2019 - Platforms State of the Union 的一些笔记</description>
    </item>
    <item>
      <title>如何实现 JavaScript 函数参数必填的支持?</title>
      <link>https://joeytat.github.io/posts/js_required_property/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/js_required_property/</guid>
      <description>&lt;p&gt;JS 在 ES6 的中新增了函数参数指定默认值的支持:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Greeting&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Joeytat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Hello &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Greeting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Hello Joeytat
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那我们就可以利用这一特性, 将一个会抛出异常的方法作为默认参数传递.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Greeting&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;EmptyPropertyException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Hello &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;EmptyPropertyException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;propertyName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;propertyName&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt; 为必填参数`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Greeting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 抛出异常: &amp;#34;Error: name 为必填参数&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样如果没有传递参数就会抛出异常, 并且带有友好的提示了.&lt;/p&gt;</description>
    </item>
    <item>
      <title>2018</title>
      <link>https://joeytat.github.io/posts/2018_overview/</link>
      <pubDate>Fri, 28 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/2018_overview/</guid>
      <description>年终总结</description>
    </item>
    <item>
      <title>为什么 Cocoapods 1.5 支持编译静态库之后大家这么高兴?</title>
      <link>https://joeytat.github.io/posts/cocoapods-1.5-static-library/</link>
      <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://joeytat.github.io/posts/cocoapods-1.5-static-library/</guid>
      <description>昨天在 Twitter 上看到 TualatriX 说[把私有库都通过 Cocoapods 编译成静态库之后很爽](https://twitter.com/tualatrix/status/1077166131956264960), 就有点好奇到底是爽在哪里.</description>
    </item>
  </channel>
</rss>
