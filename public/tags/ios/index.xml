<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS on Dev Log</title>
    
    
    
    <link>https://joeytat.github.io/tags/ios/</link>
    <description>Recent content in iOS on Dev Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://joeytat.github.io/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>翻译 - 图像优化</title>
      <link>https://joeytat.github.io/posts/optimizing_images/</link>
      <pubDate>Wed, 19 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://joeytat.github.io/posts/optimizing_images/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;翻译自 &lt;a href=&#34;https://www.swiftjectivec.com/optimizing-images/&#34;&gt;Optimizing Images&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/jordanmorgan10&#34;&gt;Jordan Morgan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有句话说：最好的照相机就是在你身边的那台。 如果这句俗语是对的，那么毫无疑问地— iPhone 是这个星球上最重要的相机， 并且我们的业界也证明了这一点。&lt;/p&gt;
&lt;p&gt;在度假中? 如果没有在你的 Instagram Story 中留下几张照片，那就不算发生过。&lt;/p&gt;
&lt;p&gt;爆炸新闻?  立刻打开 Twitter 来查看哪些媒体在通过照片实时报道事件。&lt;/p&gt;
&lt;p&gt;等等。&lt;/p&gt;
&lt;p&gt;由于图像在各个平台无处不在的出现，在低性能且内存紧张的情况下展示它们，会很容易地造成失控。 如果我们知道 UIKit 底层到底发生了什么，为什么以及如何处理图像，那么我们可以节省大量的资源开销，并且逃脱无情的系统清除制裁。&lt;/p&gt;
&lt;h2 id=&#34;理论上来说&#34;&gt;
  理论上来说
  &lt;a href=&#34;#%e7%90%86%e8%ae%ba%e4%b8%8a%e6%9d%a5%e8%af%b4&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;突击测验 - 这张我女儿的 266 KB 字节大小（并且还蛮时尚的）的照片，在一个 iOS App 中会展示需要用到多少内存?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.swiftjectivec.com/assets/images/baylor.jpg&#34; alt=&#34;Baylor&#34;&gt;&lt;/p&gt;
&lt;p&gt;剧透一下 - 不是 266 KB，也不是 2.66 MB，而是大概 14 MB。&lt;/p&gt;
&lt;p&gt;为什么?&lt;/p&gt;
&lt;p&gt;本质上来说 iOS 申请内存是根据图像的尺寸 - 而图像的文件大小反而影响不大。 这张图片的尺寸是 1718 x 2048 像素。 假设每个像素会占用 4 个字节:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1718 * 2048 * 4 / 1024 / 1024 = 13.42 MB  大约&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;想象一下，如果你需要展示一个列表的用户信息，其中每一行都显示一个常见的圆形头像在左侧。 如果你觉得每一张图片都通过 ImageOptim 或者其他方式处理过就没问题，那就错了。 保守估计每一张头像是 256 x 256 大小，那依然会耗费大量内存。&lt;/p&gt;
&lt;h2 id=&#34;渲染路径&#34;&gt;
  渲染路径
  &lt;a href=&#34;#%e6%b8%b2%e6%9f%93%e8%b7%af%e5%be%84&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;这就是说 - 明白底层是怎么回事是很划算的。 当你加载一张图片的时候，会经由这三步处理:&lt;/p&gt;
&lt;p&gt;1） 加载 - iOS 会获取到尚未解压的图片，然后开辟（我们的图片举例） 266 kb 的内存，目前为止没什么好担心的。&lt;/p&gt;
&lt;p&gt;2） 解码 - 现在 iOS 会将图片转化为 GPU 可以读取并且处理的数据。 现在是解压，在这一步就会产生我们上面提到的 14 MB 的内存开销。&lt;/p&gt;
&lt;p&gt;3） 渲染 - 按照字面意思理解，现在图片数据准备好了以任何方式进行渲染。 即使是放在 60 x 60 point 的 image view 中。&lt;/p&gt;
&lt;p&gt;解码阶段是大头。 在这里 iOS 会创建一个缓冲区 - 准确的说是图片缓冲区。 这里会将图像放在内存中。 这也是为什么，其内存占用会和图片尺寸挂钩而不是图片文件大小。 这就清晰地解释了，当处理图片时，为什么尺寸对于内存消耗如此重要。&lt;/p&gt;
&lt;p&gt;针对 &lt;code&gt;UIImage&lt;/code&gt;， 当我们把从网络请求或者其他途径获取的图片数据传递给它时，它会将缓冲区的数据解码成数据声称的格式（比如 PNG 或者 JPEG）。 然而它就会在这停顿了。 由于渲染并非只是一次性操作，&lt;code&gt;UIImage&lt;/code&gt; 会保留这个数据缓冲，这样它只需要解码一次。&lt;/p&gt;
&lt;p&gt;我们来扩展一下这个概念 - 对于任何 iOS App 来说一个完整的缓冲区就是其帧缓冲区。 这就是当 app 展示在屏幕上时，负责持有输出渲染内容的东西。 任何 iOS 设备上的显示硬件，都会使用其中的像素信息来点亮对应的物理屏幕像素。&lt;/p&gt;
&lt;p&gt;此处时间很重要。 为了达到每秒 60 帧如黄油般顺滑的滚动效果，在 app 的 window 及其 subviews 改变的时候（比如分配了一个 image 给 image view），帧缓冲区需要 UIKit 来渲染。 如果渲染慢了，就会掉帧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;觉得只有 1/60 秒处理时间太短了? 具备 Pro Motion 的设备只会给 1/120 秒的时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;大小真的很重要&#34;&gt;
  大小真的很重要
  &lt;a href=&#34;#%e5%a4%a7%e5%b0%8f%e7%9c%9f%e7%9a%84%e5%be%88%e9%87%8d%e8%a6%81&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;我们其实可以很轻松地观察到这步处理以及内存时如何被消耗掉的。 我创建了一个实验 app，用 image view 来展示了我女儿的照片。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; filePath = Bundle.main.path(forResource:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;baylor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;ofType: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jpg&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; url = NSURL(fileURLWithPath: filePath)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fileImage = UIImage(contentsOfFile: filePath)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Image view&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; imageView = UIImageView(image: fileImage)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;imageView.translatesAutoresizingMaskIntoConstraints = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;imageView.contentMode = .scaleAspectFit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;imageView.widthAnchor.constraint(equalToConstant: &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;).isActive = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;imageView.heightAnchor.constraint(equalToConstant: &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;).isActive = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;view.addSubview(imageView)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;imageView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;imageView.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;这里我们只是为了演示场景，在生产环境中请谨慎使用强制解包。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的代码运行起来时这样:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.swiftjectivec.com/assets/images/baylorPhone.jpg&#34; alt=&#34;Baylor&#34;&gt;&lt;/p&gt;
&lt;p&gt;虽然我们使用了一个小得多的 Image View 来展示图片，但通过 LLDB 我们可以查看到图片实际的尺寸。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;UIImage: &lt;span style=&#34;color:#ae81ff&#34;&gt;0x600003d41a40&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;1718&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;记住，这是点表示。 所以如果我使用的是 3x 或者 2x 设备，这个数字需要更大一些。  我们可以使用 vmmap 来确定这张图片是否真的占用了 14 MB。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vmmap --summary baylor.memgraph
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有几个东西引起了注意（为了简洁只截出了部分输出）:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Physical footprint:         69.5M
Physical footprint (peak):  69.7M
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接近 70 MB 给了我们一个很好的参考来确定我们的重构是否有效。 如果我们通过 grep 命令来筛选 Image IO，我们也能够看到图片的开销。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vmmap --summary baylor.memgraph | grep &amp;#34;Image IO&amp;#34;

Image IO  13.4M   13.4M   13.4M    0K  0K  0K   0K  2 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;啊哈 - 这里就有接近 14 MB 的脏内存。 如同我们在餐巾纸背面写下的公式计算的那样。 背景补充一下，这是一个终端的屏幕截图，清楚地显示了每一列的含义。 （由于他们被 grep 命令给省略掉了）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.swiftjectivec.com/assets/images/vmmap.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以很明确了，此刻我们在 300 x 400 的 image view 中也依然付出了图像的完整开销。 图像的大小是很关键，但这并不是唯一重要的点。&lt;/p&gt;
&lt;h2 id=&#34;色域&#34;&gt;
  色域
  &lt;a href=&#34;#%e8%89%b2%e5%9f%9f&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;你所请求的内存消耗有一部分源于另一个重要因素 - 色域。 在上面的例子中我们做了一个假设，而这个假设并不适用于大多数 iPhone - 也就是图像采用的是 sRGB 格式。 每个像素 4 个字节对应的是红，蓝，绿以及透明。&lt;/p&gt;
&lt;p&gt;如果你使用的是支持广色域格式的设备（iPhone 8+ 或 iPhone X）进行拍摄，那就可以肯定数字会加倍了。 当然了，反过来也一样，Metal 支持使用 Alpha 8 格式，就像其名字描述的那样只有单一通道。&lt;/p&gt;
&lt;p&gt;这里有非常多需要考虑的东西。 这也是为什么你应该使用 &lt;a href=&#34;https://swiftjectivec.com/UIGraphicsImageRenderer&#34;&gt;UIGraphicsImageRenderer&lt;/a&gt; 而不是 &lt;code&gt;UIGraphicsBeginImageContextWithOptions&lt;/code&gt;。 后者会&lt;strong&gt;一直&lt;/strong&gt;使用 sRGB，这也意味着你会丢失广色域格式，如果你 &lt;a href=&#34;https://instagram-engineering.com/bringing-wide-color-to-instagram-5a5481802d7d&#34;&gt;想要的话&lt;/a&gt;，或是错失节省开销的机会。  在 iOS 12 之后，&lt;code&gt;UIGraphicsImageRenderer&lt;/code&gt; 会自动帮你选择正确的方案。&lt;/p&gt;
&lt;p&gt;最后别忘记了，很多图片并不是拍摄出来的，而是通过绘图绘制的。 这里并不是刻意重复我写过的东西，只是怕你之前错过了:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; circleSize = CGSize(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;height: &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UIGraphicsBeginImageContextWithOptions(circleSize&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Draw a circle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ctx = UIGraphicsGetCurrentContext()&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UIColor.red.setFill()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ctx.setFillColor(UIColor.red.cgColor)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ctx.addEllipse(&lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;: CGRect(x: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;y: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;width: circleSize.width&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;height: circleSize.height))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ctx.drawPath(using: .fill)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; circleImage = UIGraphicsGetImageFromCurrentImageContext()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UIGraphicsEndImageContext()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个圆形图片使用的是每个像素 4 字节格式。 如果你使用 &lt;code&gt;UIGraphicsImageRenderer&lt;/code&gt; 那么渲染器会自动选择合适的格式，为每个像素节省 75% 的内存消耗。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; circleSize = CGSize(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;height: &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; renderer = UIGraphicsImageRenderer(bounds: CGRect(x: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;y: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;width: circleSize.width&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;height: circleSize.height))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; circleImage = renderer.image{ ctx &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UIColor.red.setFill()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx.cgContext.setFillColor(UIColor.red.cgColor)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx.cgContext.addEllipse(&lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;: CGRect(x: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;y: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;width: circleSize.width&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;height: circleSize.height))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx.cgContext.drawPath(using: .fill)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;缩小分辨率-vs-缩小采样&#34;&gt;
  缩小分辨率 vs 缩小采样
  &lt;a href=&#34;#%e7%bc%a9%e5%b0%8f%e5%88%86%e8%be%a8%e7%8e%87-vs-%e7%bc%a9%e5%b0%8f%e9%87%87%e6%a0%b7&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;让我们跳过简单绘图的场景 - 还有非常多与图像相关的内存问题，源自真实的摄影图片。 比如人像，风景照。&lt;/p&gt;
&lt;p&gt;对于一些工程师来说，他们有理由（逻辑上也说得过去）相信，通过 &lt;code&gt;UIImage&lt;/code&gt; 简单地缩小图像尺寸就足够了。 但由于上面提及的原因，这通常来说不够，而且据 Apple 员工 Kyle Howarth 描述这也没有那么高效。&lt;/p&gt;
&lt;p&gt;如我们之前讨论渲染路径时提到的，&lt;code&gt;UIImage&lt;/code&gt; 会产生内存问题的主要原因是它会将原始图像加载到内存中进行解压。 理想状态下，我们应该减少图像缓存区的大小。&lt;/p&gt;
&lt;p&gt;幸运的是，我们其实可以只以调整图像文件的大小为代价，来影响图像内存大小。 通常人们会假设这就是系统如何实现的，但其实不是。&lt;/p&gt;
&lt;p&gt;让我们用点底层 API 来缩小采样试试:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; imageSource = CGImageSourceCreateWithURL(url&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; options: [NSString:Any] = [kCGImageSourceThumbnailMaxPixelSize:&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               kCGImageSourceCreateThumbnailFromImageAlways:&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; scaledImage = CGImageSourceCreateThumbnailAtIndex(imageSource&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;options &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CFDictionary) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; imageView = UIImageView(image: UIImage(cgImage: scaledImage))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    imageView.translatesAutoresizingMaskIntoConstraints = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    imageView.contentMode = .scaleAspectFit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    imageView.widthAnchor.constraint(equalToConstant: &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;).isActive = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    imageView.heightAnchor.constraint(equalToConstant: &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;).isActive = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    view.addSubview(imageView)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    imageView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    imageView.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再次运行，我们得到的显示效果和之前一样。 但在这里，我们使用了 &lt;code&gt;CGImageSourceCreateThumbnailAtIndex()&lt;/code&gt; 而不是直接将原始图像放在 image view  中。 真相大白的时刻到了，让我们通过 &lt;code&gt;vmmap&lt;/code&gt; 来看看我们的优化是否奏效（再一次，为了简洁只截取了部分）:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vmmap -summary baylorOptimized.memgraph

Physical footprint:         56.3M
Physical footprint (peak):  56.7M
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;节省的开销都统计在了一起。 如果我们将之前的 69.5M 和现在的 56.3M 进行对比，我们节约了 13.2M。 这是个很大的节省，几乎是整个图片的大小。&lt;/p&gt;
&lt;p&gt;再进一步，你可以根据你的需要通过各种选项来打磨。 在 WWDC 2018 Session 219 &amp;ldquo;Images and Graphics Best Practices&amp;rdquo; 中，Apple 工程师 Kyle Sluder 通过使用 &lt;code&gt;kCGImageSourceShouldCacheImmediately&lt;/code&gt; 标记来展示了一个很有趣的技巧控制解码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;downsampleImage&lt;/span&gt;(at URL:NSURL&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;maxSize:Float) -&amp;gt; UIImage
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sourceOptions = [kCGImageSourceShouldCache:&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CFDictionary
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; source = CGImageSourceCreateWithURL(URL &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CFURL&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;sourceOptions)&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; downsampleOptions = [kCGImageSourceCreateThumbnailFromImageAlways:&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             kCGImageSourceThumbnailMaxPixelSize:maxSize
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             kCGImageSourceShouldCacheImmediately:&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             kCGImageSourceCreateThumbnailWithTransform:&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             ] &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CFDictionary
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; downsampledImage = CGImageSourceCreateThumbnailAtIndex(source,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, downsampleOptions)&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; UIImage(cgImage: downsampledImage)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Core Graphics 并不会参与解码图片，直到你明确需要使用缩略图的时候。 并且需要注意传入 &lt;code&gt;kCGImageSourceCreateThumbnailMaxPixelSize&lt;/code&gt;，就像我们做的上面两个例子那样。 如果你不传，那么你会得到一个和原始图像一样大小的缩略图。 据文档描述:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“…如果没有指定最大像素大小，那么缩略图就会是完整的图片大小，这可能不是你想要的。”
“…if a maximum pixel size isn’t specified,  then the thumbnail will be the size of the full image, which probably isn’t what you want.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么这里发生了什么?  简单来说，我们通过在缩略图上使用了缩小部分图片的等式，创建了一个小得多的解码图像缓冲区。 回忆一下之前提到的渲染路径，第一步（加载）现在我们没有创建一个原始图像大小的缓冲区，而是一个 image view 显示大小的缓冲区。&lt;/p&gt;
&lt;p&gt;想要一个这篇文章的太长不读版本? 找机会降低图像采样，而不是使用 &lt;code&gt;UIImage&lt;/code&gt; 缩小图片。&lt;/p&gt;
&lt;h2 id=&#34;附加部分&#34;&gt;
  附加部分
  &lt;a href=&#34;#%e9%99%84%e5%8a%a0%e9%83%a8%e5%88%86&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;我个人在 Tandem 中配合着 &lt;a href=&#34;https://developer.apple.com/documentation/uikit/uitableviewdatasourceprefetching?language=swift&#34;&gt;prefetch API&lt;/a&gt; （iOS 11） 使用了这种技术。 但要记住即使我们在真正使用 table view 或者 collection view 之前这样做，我们在解码图片的时候，内部依然会带来的一个 CPU 使用量的高峰。&lt;/p&gt;
&lt;p&gt;尽管 iOS 在面对持续性能消耗时有很高效的处理方案，但在我们的例子中，可能是时不时才会产生这样的高峰。 所以在处理这种问题的时候，最好把希望寄予你自己创建的队列。 另一个优势是，这样还能将解码移动到后台处理。&lt;/p&gt;
&lt;p&gt;快遮住眼睛，我业余项目中的 Objective-C 代码要出来了:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//  用你自己的队列而不是 global 队列可以避免潜在的线程爆炸
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;tableView:&lt;/span&gt;(UITableView &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)tableView &lt;span style=&#34;color:#a6e22e&#34;&gt;prefetchRowsAtIndexPaths:&lt;/span&gt;(NSArray&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;NSIndexPath &lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)indexPaths
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (self.downsampledImage &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self.listItem.mediaAssetData &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nil) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NSIndexPath &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;mediaIndexPath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [NSIndexPath indexPathForRow:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                     inSection:SECTION_MEDIA];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ([indexPaths containsObject:mediaIndexPath])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        CGFloat scale &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tableView.traitCollection.displayScale;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        CGFloat maxPixelSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (tableView.width &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; SSSpacingJumboMargin) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; scale;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dispatch_async(self.downsampleQueue&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 缩减采样
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            self.downsampledImage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [UIImage downsampledImageFromData:self.listItem.mediaAssetData
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               scale:scale
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        maxPixelSize:maxPixelSize];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            dispatch_async(dispatch_get_main_queue()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                self.listItem.downsampledMediaImage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self.downsampledImage;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意在你有大量的原始图像（raw image）资源时使用资源管理（asset catalogs）。
因为它会帮你管理缓存大小（还有其他很多的优势）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;想要了解更多关于图像和内存管理的信息，可以关注这些信息量巨大的 WWDC 18 session:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2018/416/?time=1074&#34;&gt;iOS Memory Deep Dive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2018/219/&#34;&gt;Images and Graphics Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结一下&#34;&gt;
  总结一下
  &lt;a href=&#34;#%e6%80%bb%e7%bb%93%e4%b8%80%e4%b8%8b&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;你无法察觉你不知道的东西。 就编程来说，你基本上相当于报名参加了一个需要持续跑每小时 10，000 米以跟上创新和变革的职业生涯。  这意味着&amp;hellip;有大量的 API，框架，设计模式或者优化方案你并不知晓。&lt;/p&gt;
&lt;p&gt;在图像领域尤其是这样。 大多数时间，你可能只是初始化了一个 &lt;code&gt;UIImageView&lt;/code&gt; 然后放进了一些好看的像素，就过了。 我知道啦，摩尔定理什么的。 现在这些电话运行速度很快，而且有数 G 的内存，并且我们把人类运送到了月球上，都只用了一台不到 100K 内存的电脑。&lt;/p&gt;
&lt;p&gt;但是和魔鬼共舞不会长久，他必然需要滋养他的角。 别让系统杀掉你的应用，只是因为你用了 1G 内存来展示一张自拍照。 但愿这些知识和技巧可以将你拯救于崩溃日志。&lt;/p&gt;
&lt;p&gt;下次见 ✌️。&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Platforms State of the Union(WWDC 2019)</title>
      <link>https://joeytat.github.io/posts/wwdc2019_platforms_state_of_the_union/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://joeytat.github.io/posts/wwdc2019_platforms_state_of_the_union/</guid>
      <description>
        
          
          
          
        
        
        &lt;h2 id=&#34;swiftui&#34;&gt;
  SwiftUI
  &lt;a href=&#34;#swiftui&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;在 View 层级提供了四种特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Declarative
通过声明式的语句来描述 UI 布局, 样式, 动画等.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automatic
可交互形动画, 动态字号, 夜间模式都可以通过配置来轻松实现.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compositional
组合性. 各种控件都能极其方便地组合在一起, 远比 &lt;code&gt;UIStackView&lt;/code&gt; 方便.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;VStack(alignment: .leading) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Text(item.title)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Text(item.subtitle)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consistent
自带 Reactive 特性.  将 Model 对象继承自 &lt;code&gt;BindableObject&lt;/code&gt;, 并且声明属性为 &lt;code&gt;@State&lt;/code&gt; 即可获得当属性改变时, UI 控件自动更新的效果.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;真的如果如此美好, 超级吃性能的 xib 和 storyboard 是不是可以退出舞台了.&lt;/p&gt;
&lt;h2 id=&#34;xcode-11&#34;&gt;
  Xcode 11
  &lt;a href=&#34;#xcode-11&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Live Development
直接在 Xcode Preview 中拖动控件即可生成对应的 SwiftUI 代码. 对应的修改 SwiftUI 代码也能实时在 Preview 中响应.&lt;/p&gt;
&lt;p&gt;Preview 还能通过提供一个 &lt;code&gt;PreviewProvider&lt;/code&gt; 来为其提供数据填充展示, 样式更改甚至循环语句来生成多个 Preview 同时查看控件在夜间模式和白日模式下不同的效果.&lt;/p&gt;
&lt;p&gt;Preview 部署在设备上也能热加载.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Package Management
Swift 终于有自己的 Package manage 了. 并且和 Xcode 进行了深度整合.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minimap
代码在右侧会呈现类似 ctrl+6 的缩略图.
如果代码中写了 &lt;code&gt;// MARK: -&lt;/code&gt; &lt;code&gt;// TODO: -&lt;/code&gt; 等标记, 会更清晰地显示出来. 按住 cmd 会显示所有的标记.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;版本管理
可以直接在修改代码的位置查看到原来的版本.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test Plan
同时测试各种平台各种设备.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;跨平台方案&#34;&gt;
  跨平台方案
  &lt;a href=&#34;#%e8%b7%a8%e5%b9%b3%e5%8f%b0%e6%96%b9%e6%a1%88&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;SwiftUI 支持跨平台,  同时支持 iOS, macOS, iPadOS. 那如何在 iOS App 的基础上创建一个 macOS App 呢? 只需要三个步骤:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;勾选上 deployment 中的 ✅ mac&lt;/li&gt;
&lt;li&gt;同时勾选上 ✅ iPad, 一个好的 iPad app, 就是一个好的 macOS app&lt;/li&gt;
&lt;li&gt;针对 macOS 的菜单, 快捷键等具有平台特殊性质的操作进行一些单独适配.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还对 catalina 的一些系统修改进行了介绍, 比如各种资源权限的收紧, 并且文件资源权限分成了两部分, 系统文件对于三方 app 变成了只读.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后面都是各平台系统或新功能的介绍, 还是不继续施工了.&lt;/p&gt;
&lt;/blockquote&gt;

        
        </description>
    </item>
    
    <item>
      <title>为什么 Cocoapods 1.5 支持编译静态库之后大家这么高兴?</title>
      <link>https://joeytat.github.io/posts/cocoapods-1.5-static-library/</link>
      <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://joeytat.github.io/posts/cocoapods-1.5-static-library/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;昨天在 Twitter 上看到 TualatriX 说&lt;a href=&#34;https://twitter.com/tualatrix/status/1077166131956264960&#34;&gt;把私有库都通过 Cocoapods 编译成静态库之后很爽&lt;/a&gt;, 就有点好奇到底是爽在哪里.&lt;/p&gt;
&lt;p&gt;于是去搜了一下, 原来是前段时间(大半年前吧&amp;hellip;), Cocoapods 发布了 1.5 的 &lt;a href=&#34;http://blog.cocoapods.org/CocoaPods-1.5.0/&#34;&gt;release note&lt;/a&gt;, 宣布支持 Swift 静态库编译. 并且文中提到了对于担心动态二进制文件影响应用启动速度的人来说, 这是个了不起的更新.
jh
那又是为什么 App 使用静态库会比动态库有更快的启动速度呢? 又跑去搜了一下官方文档. 打开 &lt;a href=&#34;https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/OverviewOfDynamicLibraries.html&#34;&gt;Dynamic Library Programming Topics&lt;/a&gt; 开头就看到:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This article introduces dynamic libraries and shows how using dynamic libraries instead of static libraries reduces both the file size and initial memory footprint of the apps that use them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这篇文章主要介绍了动态库, 并且展示了通过&lt;strong&gt;使用动态库&lt;/strong&gt;而不是静态库, 是如何&lt;strong&gt;缩减&lt;/strong&gt;了应用的大小和初始内存空间的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://ww1.rs.fanjian.net/c/ab/c8/25/53abf0c06ec808c1fe250d3565ff0d32.jpg&#34; alt=&#34;黑人问号&#34;&gt;&lt;/p&gt;
&lt;p&gt;┻━┻ (ヽ(`Д ́)ノ( ┻━┻  这和说好的不一样啊?&lt;/p&gt;
&lt;p&gt;带着疑问我又跑去看了一下苹果的 &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2016/406&#34;&gt;WWDC 2016 -  Optimizing App Startup Time&lt;/a&gt; 的视频, 这次问题终于得到了解决.&lt;/p&gt;
&lt;p&gt;这里的库是什么? 是可执行文件的集合. 静态库与动态库调用时机的区别在于, 静态库在应用启动的时候, 会和程序的可执行代码一起, 被加载到应用的内存空间中. 这就会导致应用启动慢, 并且内存占用大. 而动态库则是在代码真正被需要调用的时候, 才加载到内存中.&lt;/p&gt;
&lt;p&gt;所以才会有苹果文档中提到的「通过&lt;strong&gt;使用动态库&lt;/strong&gt;而不是静态库, 是如何&lt;strong&gt;缩减&lt;/strong&gt;了应用的大小和初始内存空间的」这句话.&lt;/p&gt;
&lt;p&gt;可这是站在系统角度来说的. 在 iOS 中, 平均每个 App 包含了 &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2016-406/?time=1684&#34;&gt;1 到 400&lt;/a&gt; 个动态库. 其中有很大一部分是系统级动态库. 苹果为其做了许多的优化, 比如提前计算, 提前缓存等. 这对于系统提供的动态库来说, 当然比静态库更快.&lt;/p&gt;
&lt;p&gt;但 App 中还包含了很多自有的动态库, 这部分动态库苹果没有办法为期提供优化. 而对于 dylib 的加载又是非常耗费资源的. 所以苹果对其的建议是最好在 &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2016-406/?time=1794&#34;&gt;6&lt;/a&gt; 个左右.&lt;/p&gt;
&lt;p&gt;然后我也把项目中的 Swift pods 编译为静态库了, 效果如下.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 优化前
[DYMTLInitPlatform] platform initialization successful
Total pre-main time: 1.5 seconds (100.0%)
         dylib loading time: 968.07 milliseconds (61.1%)
        ......
        ......
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Pods 使用静态库后
[DYMTLInitPlatform] platform initialization successful
Total pre-main time: 1.1 seconds (100.0%)
         dylib loading time: 520.52 milliseconds (47.2%)
        ......
        ......
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后再总结一下.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于系统提供了优化的动态库来说, 一定是比静态库启动加载快且占用内存更小的. 14er&lt;/li&gt;
&lt;li&gt;而对于 App 自有的动态库来说, 系统在加载动态库所消耗的资源要比加载静态库来得多, 所以最好限制在 6 个左右.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;
  参考链接
  &lt;a href=&#34;#%e5%8f%82%e8%80%83%e9%93%be%e6%8e%a5&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/3d0ae289dee0&#34;&gt;Cocoapods 的静态库和动态库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2016/406/?time=203&#34;&gt;WWDC 2016 - Optimizing App Startup Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/OverviewOfDynamicLibraries.html&#34;&gt;Dynamic Library Programming Topics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.meituan.com/waimai_ios_optimizing_startup.html&#34;&gt;美团外卖 iOS App冷启动治理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        
        </description>
    </item>
    
  </channel>
</rss>